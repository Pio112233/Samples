#include "EnemyChar.h"
#include "EnemyAIController.h"
#include "NavigationSystem.h"
#include "EnergyKeeper/EnergyKeeperCharacter.h"
#include "Kismet/KismetMathLibrary.h"
#include "BehaviorTree/BehaviorTree.h"
#include "BehaviorTree/BlackboardComponent.h"
#include "Perception/PawnSensingComponent.h"


// Sets default values
AEnemyChar::AEnemyChar()
{
 	// Set this character to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
	PrimaryActorTick.bCanEverTick = true;
	
	GetMesh()->SetCollisionResponseToChannel(ECC_Pawn, ECR_Overlap);
	GetMesh()->SetGenerateOverlapEvents(true);

	PawnSensing = CreateDefaultSubobject<UPawnSensingComponent>("PawnSensing");

	AutoPossessAI = EAutoPossessAI::PlacedInWorldOrSpawned;

}

void AEnemyChar::BeginPlay()
{
	Super::BeginPlay();
	PawnSensing->OnSeePawn.AddDynamic(this, &AEnemyChar::PlayerDetected);
	PawnSensing->OnHearNoise.AddDynamic(this, &AEnemyChar::PlayerHeard);
	
	GetMesh()->OnComponentBeginOverlap.AddDynamic(this, &AEnemyChar::OnOverlap);

	UNavigationSystemV1* NavSystem = UNavigationSystemV1::GetCurrent(GetWorld());
	AEnemyAIController* AIController = Cast<AEnemyAIController>(GetController());
	FVector const CurrentLoc = GetActorLocation();
	FNavLocation TargetLoc;
	if (AIController)
	{
		NavSystem->GetRandomReachablePointInRadius(CurrentLoc, 1000.0, TargetLoc, nullptr, nullptr);
		AIController->GetBlackboardComponent()->SetValueAsVector("LocationA",TargetLoc);
		NavSystem->GetRandomReachablePointInRadius(AIController->GetBlackboardComponent()->GetValueAsVector("LocationA"), 1000.0, TargetLoc, nullptr, nullptr);
		AIController->GetBlackboardComponent()->SetValueAsVector("LocationB",TargetLoc);
	}
}

// Called to bind functionality to input
void AEnemyChar::SetupPlayerInputComponent(UInputComponent* PlayerInputComponent)
{
	Super::SetupPlayerInputComponent(PlayerInputComponent);
}

void AEnemyChar::OnOverlap(UPrimitiveComponent* OverlappedComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult)
{
	if (OtherActor)
	{
		CharRef = Cast<AEnergyKeeperCharacter>(OtherActor);
		if (IsValid(CharRef) && OtherActor->GetVelocity().Size2D() >= LethalVelocity)
		{
			Destroy();
		}
		else
		{
			StealEnergy();
		}
	}
}

void AEnemyChar::StealEnergy()
{
	if (CharRef)
	{
		CharRef->DecreasePlayerEnergy(EnergyStealValue);
		Destroy();
	}
}

void AEnemyChar::PlayerDetected(APawn* Pawn)
{
	if (AEnemyAIController* AI = Cast<AEnemyAIController>(GetController()))
	{
		if (!IsValid(AI->GetBlackboardComponent()->GetValueAsObject("PlayerPawn")))
		{
			AI->GetBlackboardComponent()->SetValueAsObject("PlayerPawn", Pawn);
			AI->StopMovement();
			MoveToPlayer();
		}
	}
}

void AEnemyChar::PlayerHeard(APawn* HeardPawn, const FVector& Location, float Loudness)
{
	if (AEnemyAIController* AI = Cast<AEnemyAIController>(GetController()))
	{
		if (!IsValid(AI->GetBlackboardComponent()->GetValueAsObject("PlayerPawn")))
		{
			AI->GetBlackboardComponent()->SetValueAsObject("PlayerPawn", HeardPawn);
			AI->StopMovement();
			MoveToPlayer();
		}
	}
}


void AEnemyChar::MoveToPlayer()
{
	if (AEnemyAIController* AI = Cast<AEnemyAIController>(GetController()))
	{
		AI->MoveToActor(Cast<AActor>(AI->GetBlackboardComponent()->GetValueAsObject("PlayerPawn")), -1, false, true, true);
	}
}
